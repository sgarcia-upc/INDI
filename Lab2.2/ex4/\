#include "MyGLWidget.h"
#include "qnamespace.h"
#include "trigonometric.hpp"

#include <iostream>

MyGLWidget::MyGLWidget (QWidget* parent) : QOpenGLWidget(parent), program(NULL)
{
    setFocusPolicy(Qt::StrongFocus);  // per rebre events de teclat
    scale = 1.0;
}

MyGLWidget::~MyGLWidget ()
{
    if (program != NULL)
        delete program;
}

void MyGLWidget::initializeGL ()
{
    // Cal inicialitzar l'ús de les funcions d'OpenGL
    initializeOpenGLFunctions();  
    glEnable (GL_DEPTH_TEST);
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glClearColor(0.5, 0.7, 1.0, 1.0); // defineix color de fons (d'esborrat)
    carregaShaders();
    creaBuffers();
    carregaBuffers();

    init_camera();

    projectTransform();
    viewTransform();
}

void MyGLWidget::init_camera(){


    glm::vec3 min (-1,-1,-1);
    glm::vec3 max (1,1,1);
    
    radi = distance(min, max) / 2;
    
    centre = (max + min) / 2.0f;

    fovini = fov = M_PI/3 ;

    znear = radi;
    zfar  = radi*3;
    raw    = (float) width()/height();

    OBS = centre + glm::vec3(0,0, radi*2);
    VRP = centre;
    UP  = glm::vec3(0,1,0);
}

void MyGLWidget::paintGL () 
    {
        // Aquest codi és necessari únicament per a MACs amb pantalla retina.
#ifdef __APPLE__
    GLint vp[4];
    glGetIntegerv (GL_VIEWPORT, vp);
    ample = vp[2];
    alt = vp[3];
#endif

    // En cas de voler canviar els paràmetres del viewport, descomenteu la crida següent i
    // useu els paràmetres que considereu (els que hi ha són els de per defecte)
    glViewport (0, 0, ample, alt);

    // Esborrem el frame-buffer
    glClear (GL_COLOR_BUFFER_BIT);


    // Activem el VAO per a pintar la caseta 
    modelTransformTerra();
    glBindVertexArray (VAO_terra);
    glDrawArrays(GL_TRIANGLES, 0, 9);

    modelTransformHomer();
    glBindVertexArray(VAO_Homer);
    glDrawArrays(GL_TRIANGLES, 0, m.faces().size()*3);

}

void MyGLWidget::modelTransformTerra () 
{
    glm::mat4 transform (1.0f);
    transform = glm::scale(transform, glm::vec3(scale));
    glUniformMatrix4fv(transLoc, 1, GL_FALSE, &transform[0][0]);
    glBindVertexArray (0);

}

void MyGLWidget::modelTransformHomer () 
{
    // Matriu de transformació de model
    glm::mat4 transform (1.0f);
    transform = glm::rotate(transform, glm::radians(rotate), glm::vec3(0.0, 1.0, 0.0));
    transform = glm::scale(transform, glm::vec3(scale));
    glUniformMatrix4fv(transLoc, 1, GL_FALSE, &transform[0][0]);
    glBindVertexArray (0);
}

void MyGLWidget::resizeGL (int w, int h) 
{
    ample = w;
    alt = h;
    raw = float(w) / float(h);

    if (raw < 1.0)
        fov = 2.0*atan( tan(fovini/2) / raw );
    else
        fov = fovini;

    projectTransform();
}

void MyGLWidget::keyPressEvent(QKeyEvent* event) 
{
    makeCurrent();
    switch (event->key()) {
        case Qt::Key_S:  // escalar a més gran
            scale += 0.05;
            break;
                        
        case Qt::Key_D:  // escalar a més petit
            scale -= 0.05;
            break;
                        
        case Qt::Key_R:  // escalar a més petit
            rotate += 45;
            break;
        default:
            event->ignore();
            break;
    }
    update();
}

void MyGLWidget::carregaBuffers()
{
    glGenVertexArrays(1, &VAO_Homer);
    glBindVertexArray(VAO_Homer); 

    m.load("../models/Patricio.obj");

    glm::vec3 min = glm::vec3(m.vertices()[0], m.vertices()[1], m.vertices()[2]);
    glm::vec3 max = glm::vec3(m.vertices()[0], m.vertices()[1], m.vertices()[2]);
    for (int i=3; i < m.vertices().size(); i+=3)
    {
        glm::vec3 x = glm::vec3(m.vertices()[i], m.vertices()[i+1], m.vertices()[i+2]);
        if (x < min) min = x;
        if (x > max) max = x;

    }

    GLuint VBO_Homer;
    glGenBuffers(1, &VBO_Homer);
    glBindBuffer(GL_ARRAY_BUFFER, VBO_Homer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat)*m.faces().size()*3*3, m.VBO_vertices(), GL_STATIC_DRAW);
    glVertexAttribPointer(vertexLoc, 3, GL_FLOAT, GL_FALSE, 0, 0);
    glEnableVertexAttribArray(vertexLoc);

    GLuint VBO_Homer_color;
    glGenBuffers(1, &VBO_Homer_color);
    glBindBuffer(GL_ARRAY_BUFFER, VBO_Homer_color);
    glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat)*m.faces().size()*3*3, m.VBO_matdiff(), GL_STATIC_DRAW);
    glVertexAttribPointer(colorLoc, 3, GL_FLOAT, GL_FALSE, 0, 0);
    glEnableVertexAttribArray(colorLoc);
}

void MyGLWidget::creaBuffers () 
{
    // Dades de la caseta
    // Dos VBOs, un amb posició i l'altre amb color
    glm::vec3 posicio[6] = {
        glm::vec3(1.0, -1.0, 1.0),
    	glm::vec3(1.0, -1.0, -1.0),
    	glm::vec3(-1.0, -1.0, -1.0),
    	glm::vec3(1.0, -1.0, 1.0),
    	glm::vec3(-1.0, -1.0, -1.0),
    	glm::vec3(-1.0, -1.0, 1.0)
    }; 
    glm::vec3 color[6] = {
        glm::vec3(0.4,0.4,0),
        glm::vec3(0.4,0.4,0),
        glm::vec3(0.4,0.4,0),
        glm::vec3(0.4,0.4,0),
        glm::vec3(0.4,0.4,0),
        glm::vec3(0.4,0.4,0)
    };

    // Creació del Vertex Array Object per pintar
    glGenVertexArrays(1, &VAO_terra);
    glBindVertexArray(VAO_terra);

    GLuint VBO_terra[2];
    glGenBuffers(2, VBO_terra);
    glBindBuffer(GL_ARRAY_BUFFER, VBO_terra[0]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(posicio), posicio, GL_STATIC_DRAW);

    // Activem l'atribut vertexLoc
    glVertexAttribPointer(vertexLoc, 3, GL_FLOAT, GL_FALSE, 0, 0);
    glEnableVertexAttribArray(vertexLoc);

    glBindBuffer(GL_ARRAY_BUFFER, VBO_terra[1]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(color), color, GL_STATIC_DRAW);

    // Activem l'atribut colorLoc
    glVertexAttribPointer(colorLoc, 3, GL_FLOAT, GL_FALSE, 0, 0);
    glEnableVertexAttribArray(colorLoc);

    glBindVertexArray (0);
}



void MyGLWidget::projectTransform () {
    // glm::perspective (FOV en radians, ra window, znear, zfar)
    //printf("%f\n", fov);
    //printf("%f\n", raw);
    //printf("%f\n", znear);
    //printf("%f\n", zfar);
    glm::mat4 Proj = glm::perspective (fov, raw, znear, zfar);
    glUniformMatrix4fv (projLoc, 1, GL_FALSE, &Proj[0][0]);
}

void MyGLWidget::viewTransform () {
    // glm::lookAt (OBS, VRP, UP)
    glm::mat4 View = glm::lookAt (OBS, VRP, UP);
    glUniformMatrix4fv (viewLoc, 1, GL_FALSE, &View[0][0]);
}

void MyGLWidget::carregaShaders()
{
    // Creem els shaders per al fragment shader i el vertex shader
    QOpenGLShader fs (QOpenGLShader::Fragment, this);
    QOpenGLShader vs (QOpenGLShader::Vertex, this);
    // Carreguem el codi dels fitxers i els compilem
    fs.compileSourceFile("shaders/basicShader.frag");
    vs.compileSourceFile("shaders/basicShader.vert");
    // Creem el program
    program = new QOpenGLShaderProgram(this);
    // Li afegim els shaders corresponents
    program->addShader(&fs);
    program->addShader(&vs);
    // Linkem el program
    program->link();
    // Indiquem que aquest és el program que volem usar
    program->bind();

    // Obtenim identificador per a l'atribut “vertex" del vertex shader
    vertexLoc = glGetAttribLocation (program->programId(), "vertex");
    // Obtenim identificador per a l'atribut “color" del vertex shader
    colorLoc = glGetAttribLocation (program->programId(), "color");
    // Uniform locations
    transLoc = glGetUniformLocation(program->programId(), "TG");

    projLoc = glGetUniformLocation (program->programId(), "proj");

    viewLoc = glGetUniformLocation (program->programId(), "view");
}
